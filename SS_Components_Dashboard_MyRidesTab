import React from "react";
import { Ride } from "@/entities/Ride";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapPin, Calendar, Users, DollarSign, Settings, Trash2 } from "lucide-react";
import { format } from "date-fns";

export default function MyRidesTab({ rides, onRideUpdate }) {
  const handleCancelRide = async (rideId) => {
    if (window.confirm("Are you sure you want to cancel this ride?")) {
      try {
        await Ride.update(rideId, { status: "cancelled" });
        onRideUpdate();
      } catch (error) {
        console.error("Error cancelling ride:", error);
        alert("Failed to cancel ride. Please try again.");
      }
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "active":
        return "bg-green-100 text-green-800 border-green-200";
      case "completed":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "cancelled":
        return "bg-red-100 text-red-800 border-red-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  if (rides.length === 0) {
    return (
      <Card className="text-center py-12">
        <CardContent>
          <div className="w-16 h-16 bg-[#5D4EFC]/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <Users className="w-8 h-8 text-[#5D4EFC]" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            No rides created yet
          </h3>
          <p className="text-gray-600 mb-4">
            Start offering rides to earn money and help fellow students.
          </p>
          <Button className="bg-[#5D4EFC] hover:bg-[#4B3FD1] text-white">
            Create Your First Ride
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {rides.map((ride) => (
        <Card key={ride.id} className="glass-card hover-lift">
          <CardHeader>
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-2">
                  <CardTitle className="text-lg">{ride.origin} â†’ {ride.destination}</CardTitle>
                  <Badge className={getStatusColor(ride.status)}>
                    {ride.status}
                  </Badge>
                </div>
                <div className="flex items-center text-gray-600 mb-2">
                  <Calendar className="w-4 h-4 mr-2" />
                  <span className="text-sm">
                    {format(new Date(ride.departure_datetime), "MMM d, yyyy 'at' h:mm a")}
                  </span>
                </div>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Settings className="w-4 h-4" />
                </Button>
                {ride.status === "active" && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleCancelRide(ride.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                )}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="flex items-center text-gray-600">
                <Users className="w-4 h-4 mr-2 text-[#5D4EFC]" />
                <div>
                  <div className="text-sm font-medium">Seats</div>
                  <div className="text-sm">{ride.available_seats}/{ride.total_seats}</div>
                </div>
              </div>
              
              <div className="flex items-center text-gray-600">
                <DollarSign className="w-4 h-4 mr-2 text-[#5D4EFC]" />
                <div>
                  <div className="text-sm font-medium">Price</div>
                  <div className="text-sm">${ride.price_per_seat}/seat</div>
                </div>
              </div>
              
              <div className="flex items-center text-gray-600">
                <div>
                  <div className="text-sm font-medium">Total Earnings</div>
                  <div className="text-sm font-semibold text-green-600">
                    ${((ride.total_seats - ride.available_seats) * ride.price_per_seat).toFixed(2)}
                  </div>
                </div>
              </div>
              
              <div className="flex items-center text-gray-600">
                <div>
                  <div className="text-sm font-medium">Bookings</div>
                  <div className="text-sm">{ride.total_seats - ride.available_seats}</div>
                </div>
              </div>
            </div>
            
            {ride.description && (
              <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600">{ride.description}</p>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
